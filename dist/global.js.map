{"version":3,"file":"global.js","mappings":"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","sources":["webpack://jamesBond/../lowclass/src/native.ts","webpack://jamesBond/../lowclass/src/utils.ts","webpack://jamesBond/webpack/bootstrap","webpack://jamesBond/webpack/runtime/define property getters","webpack://jamesBond/webpack/runtime/hasOwnProperty shorthand","webpack://jamesBond/webpack/runtime/make namespace object","webpack://jamesBond/../lowclass/src/Class.ts","webpack://jamesBond/../lowclass/src/multiple.ts","webpack://jamesBond/../lowclass/src/index.ts","webpack://jamesBond/./src/observe.ts","webpack://jamesBond/./src/index.ts"],"sourcesContent":["// borrowed from (and slightly modified) https://github.com/Mr0grog/newless\n// The newless license is BSD 3:\n\n// TODO no any types\n\n/*\n * Copyright (c) 2013-2016, Rob Brackett\n * Copyright (c) 2018, Joseph Orbegoso Pea\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport {getFunctionBody, setDescriptor, Constructor} from './utils.js'\n\nexport {newless as native}\n\nexport default newless\n\nvar supportsSpread = isSyntaxSupported('Object(...[{}])')\nvar supportsClass = isSyntaxSupported('class Test {}')\nvar supportsNewTarget = isSyntaxSupported('new.target')\n\n// Used to track the original wrapped constructor on a newless instance\nvar TRUE_CONSTRUCTOR = Symbol ? Symbol('trueConstructor') : '__newlessTrueConstructor__'\n\nvar setPrototype =\n\tObject.setPrototypeOf ||\n\tfunction setPrototypeOf(object, newPrototype) {\n\t\tobject.__proto__ = newPrototype\n\t}\n\n// Polyfill for Reflect.construct\nvar construct =\n\t(Reflect && Reflect.construct) ||\n\t(function () {\n\t\tif (supportsClass) {\n\t\t\treturn Function(\n\t\t\t\t'constructor, args, target',\n\t\t\t\t`\n                'use strict';\n\n                if (arguments.length === 3 && typeof target !== 'function')\n                    throw new TypeError(target + ' is not a constructor');\n\n                target = target || constructor;\n\n                // extend target so the right prototype is constructed (or nearly the\n                // right one; ideally we'd do instantiator.prototype = target.prototype,\n                // but a class's prototype property is not writable)\n                class instantiator extends target {};\n                // but ensure the *logic* is 'constructor' for ES2015-compliant engines\n                Object.setPrototypeOf(instantiator, constructor);\n                // ...and for Safari 9\n                instantiator.prototype.constructor = constructor;\n\n                // The spread operator is *dramatically faster, so use it if we can:\n                // http://jsperf.com/new-via-spread-vs-dynamic-function/4\n                ${\n\t\t\t\t\tsupportsSpread\n\t\t\t\t\t\t? `\n\n                    var value = new instantiator(...([].slice.call(args)));\n\n                `\n\t\t\t\t\t\t: `\n\n                    // otherwise, create a dynamic function in order to use 'new'\n                    // Note using 'function.bind' would be simpler, but is much slower:\n                    // http://jsperf.com/new-operator-with-dynamic-function-vs-bind\n                    var argList = '';\n                    for (var i = 0, len = args.length; i < len; i++) {\n                    if (i > 0) argList += ',';\n                    argList += 'args[' + i + ']';\n                    }\n                    var constructCall = Function('constructor, args',\n                    'return new constructor( ' + argList + ' );'\n                    );\n                    var value = constructCall(constructor, args);\n\n                    args = Array.prototype.slice.call(args);\n                    args = [null].concat(args);\n                    var value = new constructor.bind.apply(constructor, args);\n\n                `\n\t\t\t\t}\n\n                // fix up the prototype so it matches the intended one, not one who's\n                // prototype is the intended one :P\n                Object.setPrototypeOf(value, target.prototype);\n                return value;\n            `,\n\t\t\t)\n\n\t\t\t//return Function(\"constructor, args, newTarget\", `\n\t\t\t//  'use strict';\n\n\t\t\t//  if (arguments.length === 3 && typeof newTarget === undefined)\n\t\t\t//    throw new TypeError('undefined is not a constructor');\n\n\t\t\t//  newTarget = newTarget || constructor;\n\n\t\t\t//  ${ supportsSpread ? `\n\n\t\t\t//    var value = new constructor(...([].slice.call(args)));\n\n\t\t\t//  `:`\n\n\t\t\t//    args = Array.prototype.slice.call(args);\n\t\t\t//    args = [null].concat(args);\n\t\t\t//    var value = new constructor.bind.apply(constructor, args);\n\n\t\t\t//  `}\n\n\t\t\t//  Object.setPrototypeOf(value, newTarget.prototype);\n\t\t\t//  return value;\n\t\t\t//`);\n\t\t} else {\n\t\t\tvar instantiator = function () {} as any\n\t\t\treturn function construct(constructor: any, args: any, target: any) {\n\t\t\t\tif (arguments.length === 3 && typeof target !== 'function')\n\t\t\t\t\tthrow new TypeError(target + ' is not a constructor')\n\t\t\t\tinstantiator.prototype = (target || constructor).prototype\n\t\t\t\tvar instance = new instantiator()\n\t\t\t\tvar value = constructor.apply(instance, args)\n\t\t\t\tif (typeof value === 'object' && value) {\n\t\t\t\t\t// we can do better if __proto__ is available (in some ES5 environments)\n\t\t\t\t\tvalue.__proto__ = (target || constructor).prototype\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\treturn instance\n\t\t\t}\n\t\t}\n\t})()\n\n// ES2015 class methods are non-enumerable; we need a helper for copying them.\nvar SKIP_PROPERTIES: (string | symbol)[] = ['arguments', 'caller', 'length', 'name', 'prototype']\nfunction copyProperties(source: any, destination: any) {\n\tif (Object.getOwnPropertyNames && Object.defineProperty) {\n\t\tvar properties: (string | symbol)[] = Object.getOwnPropertyNames(source)\n\t\tif (Object.getOwnPropertySymbols) {\n\t\t\tproperties = properties.concat(Object.getOwnPropertySymbols(source))\n\t\t}\n\t\tfor (var i = properties.length - 1; i >= 0; i--) {\n\t\t\tif (SKIP_PROPERTIES.indexOf(properties[i]) === -1) {\n\t\t\t\tObject.defineProperty(\n\t\t\t\t\tdestination,\n\t\t\t\t\tproperties[i],\n\t\t\t\t\tObject.getOwnPropertyDescriptor(source, properties[i])!,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (var property in source) {\n\t\t\tdestination[property] = source[property]\n\t\t}\n\t}\n}\n\ntype FuncLikeCtor<T, S = {}> = {\n\t(): T\n\tnew (): T\n} & S\n\nfunction newless<T extends Constructor>(constructor: T): FuncLikeCtor<InstanceType<T>, T> {\n\tvar name = constructor.name\n\n\t// V8 and newer versions of JSCore return the full class declaration from\n\t// `toString()`, which lets us be a little smarter and more performant\n\t// about what to do, since we know we are dealing with a \"class\". Note,\n\t// however, not all engines do this. This could be false and the constructor\n\t// might still use class syntax.\n\tvar usesClassSyntax = constructor.toString().substr(0, 5) === 'class'\n\n\tvar requiresNew = usesClassSyntax ? true : null\n\n\tvar newlessConstructor: CtorWithLength = (() =>\n\t\tfunction (this: any) {\n\t\t\t// If called with an already valid 'this', preserve that 'this' value\n\t\t\t// in the super-type's constructor whenever possible. With function\n\t\t\t// constructors (as opposed to class constructors), it's possible to\n\t\t\t// alter the instance before calling the super constructor--so it's\n\t\t\t// important to preserve that instance if at all possible.\n\t\t\tif (!requiresNew && this instanceof newlessConstructor) {\n\t\t\t\t// requiresNew = 'false' indicates we know the 'new' operator isn't\n\t\t\t\t// necessary for this constructor, but 'null' indicates uncertainty,\n\t\t\t\t// so the call needs to handle potential errors the first time in\n\t\t\t\t// order to determine whether 'new' is definitely required.\n\t\t\t\tif (requiresNew === false) {\n\t\t\t\t\tconst returnValue = constructor.apply(this, arguments as any)\n\t\t\t\t\treturn (typeof returnValue === 'object' && returnValue) || this\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\trequiresNew = false\n\t\t\t\t\tconst returnValue = constructor.apply(this, arguments as any)\n\t\t\t\t\treturn (typeof returnValue === 'object' && returnValue) || this\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Do our best to only capture errors triggred by class syntax.\n\t\t\t\t\t// Unfortunately, there's no special error type for this and the\n\t\t\t\t\t// message is non-standard, so this is the best check we can do.\n\t\t\t\t\tif (\n\t\t\t\t\t\terror instanceof TypeError &&\n\t\t\t\t\t\t(/class constructor/i.test(error.message) || /use the 'new' operator/i.test(error.message)) // Custom Elements in Chrome\n\t\t\t\t\t\t// TODO: there might be other error messages we need to catch,\n\t\t\t\t\t\t// depending on engine and use case. We need to test in all browsers\n\t\t\t\t\t) {\n\t\t\t\t\t\t// mark this constructor as requiring 'new' for next time\n\t\t\t\t\t\trequiresNew = true\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\terror instanceof Error &&\n\t\t\t\t\t\t\t/Illegal constructor/i.test(error.message) &&\n\t\t\t\t\t\t\tObject.create(constructor.prototype) instanceof Node\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t`The following error can happen if a Custom Element is called\nwith 'new' before being defined. The constructor was ${constructor.name}: `,\n\t\t\t\t\t\t\t\tconstructor,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// make a reasonably good replacement for 'new.target' which is a\n\t\t\t// syntax error in older engines\n\t\t\tvar newTarget\n\t\t\tvar hasNewTarget = false\n\t\t\tif (supportsNewTarget) {\n\t\t\t\teval('newTarget = new.target')\n\t\t\t\tif (newTarget) hasNewTarget = true\n\t\t\t}\n\t\t\tif (!supportsNewTarget || !hasNewTarget) {\n\t\t\t\tnewTarget = this instanceof newlessConstructor ? this.constructor : constructor\n\t\t\t}\n\t\t\tconst returnValue = construct(constructor, arguments, newTarget)\n\t\t\t// best effort to make things easy for functions inheriting from classes\n\t\t\tif (this instanceof newlessConstructor) {\n\t\t\t\tsetPrototype(this, returnValue)\n\t\t\t}\n\t\t\treturn returnValue\n\t\t})() as unknown as CtorWithLength\n\n\tif (name) {\n\t\tconst code = getFunctionBody(newlessConstructor)\n\n\t\tnewlessConstructor = Function(\n\t\t\t'constructor, construct, setPrototype, requiresNew, supportsNewTarget',\n\t\t\t`\n      var newlessConstructor = function ${name}() { ${code} };\n      return newlessConstructor\n    `,\n\t\t)(constructor, construct, setPrototype, requiresNew, supportsNewTarget)\n\t}\n\n\t// copy the `.length` value to the newless constructor\n\tif (constructor.length) {\n\t\t// length is not writable, only configurable, therefore the value\n\t\t// has to be set with a descriptor update\n\t\tsetDescriptor(newlessConstructor, 'length', {\n\t\t\tvalue: constructor.length,\n\t\t})\n\t}\n\n\tnewlessConstructor.prototype = Object.create(constructor.prototype)\n\tnewlessConstructor.prototype.constructor = newlessConstructor\n\n\t// NOTE: *usually* the below will already be true, but we ensure it here.\n\t// Safari 9 requires this for the 'super' keyword to work. Newer versions\n\t// of WebKit and other engines do not. Instead, they use the constructor's\n\t// prototype chain (which is correct by ES2015 spec) (see below).\n\tconstructor.prototype.constructor = constructor\n\n\t// for ES2015 classes, we need to make sure the constructor's prototype\n\t// is the super class's constructor. Further, optimize performance by\n\t// pointing at the actual constructor implementation instead of the\n\t// newless wrapper (in the case that it is wrapped by newless).\n\t;(newlessConstructor as any)[TRUE_CONSTRUCTOR] = constructor\n\n\tcopyProperties(constructor, newlessConstructor)\n\tsetPrototype(newlessConstructor, constructor)\n\n\treturn newlessConstructor as FuncLikeCtor<InstanceType<T>, T>\n}\n\n// Test whether a given syntax is supported\nfunction isSyntaxSupported(example: string, useStrict = true): boolean {\n\ttry {\n\t\treturn !!Function('', (useStrict ? \"'use strict';\" : '') + example)\n\t} catch (error) {\n\t\treturn false\n\t}\n}\n\ntype CtorWithLength = Constructor<\n\tobject,\n\tany[],\n\t{\n\t\tlength: number\n\t}\n>\n","// TODO no any\n\nexport class WeakTwoWayMap {\n\tm = new WeakMap()\n\tset(a: Object, b: Object) {\n\t\tthis.m.set(a, b)\n\t\tthis.m.set(b, a)\n\t}\n\tget(item: Object) {\n\t\treturn this.m.get(item)\n\t}\n\thas(item: Object) {\n\t\treturn this.m.has(item)\n\t}\n}\n\n// assumes the function opening, body, and closing are on separate lines\nexport function getFunctionBody(fn: Function): string {\n\tconst code = fn.toString().split('\\n')\n\tcode.shift() // remove opening line (function() {)\n\tcode.pop() // remove closing line (})\n\treturn code.join('\\n')\n}\n\nconst descriptorDefaults = {\n\tenumerable: true,\n\tconfigurable: true,\n}\n\n// makes it easier and less verbose to work with descriptors\nexport function setDescriptor<T extends {}>(\n\tobj: T,\n\tkey: keyof T,\n\tnewDescriptor: PropertyDescriptor,\n\tinherited = false,\n): void {\n\tlet currentDescriptor = inherited ? getInheritedDescriptor(obj, key) : Object.getOwnPropertyDescriptor(obj, key)\n\n\tnewDescriptor = overrideDescriptor(currentDescriptor, newDescriptor)\n\tObject.defineProperty(obj, key, newDescriptor)\n}\n\nexport function setDescriptors(obj: Object, newDescriptors: Record<string, PropertyDescriptor>): void {\n\tlet newDescriptor\n\tlet currentDescriptor\n\tconst currentDescriptors = Object.getOwnPropertyDescriptors(obj)\n\n\tfor (const key in newDescriptors) {\n\t\tnewDescriptor = newDescriptors[key]\n\t\tcurrentDescriptor = currentDescriptors[key]\n\t\tnewDescriptors[key] = overrideDescriptor(currentDescriptor, newDescriptor)\n\t}\n\n\tObject.defineProperties(obj, newDescriptors)\n}\n\nfunction overrideDescriptor(\n\toldDescriptor: PropertyDescriptor | undefined,\n\tnewDescriptor: PropertyDescriptor,\n): PropertyDescriptor {\n\tif (\n\t\t('get' in newDescriptor || 'set' in newDescriptor) &&\n\t\t('value' in newDescriptor || 'writable' in newDescriptor)\n\t) {\n\t\tthrow new TypeError('cannot specify both accessors and a value or writable attribute')\n\t}\n\n\tif (oldDescriptor) {\n\t\tif ('get' in newDescriptor || 'set' in newDescriptor) {\n\t\t\tdelete oldDescriptor.value\n\t\t\tdelete oldDescriptor.writable\n\t\t} else if ('value' in newDescriptor || 'writable' in newDescriptor) {\n\t\t\tdelete oldDescriptor.get\n\t\t\tdelete oldDescriptor.set\n\t\t}\n\t}\n\n\treturn {...descriptorDefaults, ...oldDescriptor, ...newDescriptor}\n}\n\n// TODO use signature override\nexport function propertyIsAccessor<T extends Object | PropertyDescriptor>(\n\tobj: T,\n\tkey?: keyof T,\n\tinherited = true,\n): boolean {\n\tlet result = false\n\tlet descriptor: PropertyDescriptor | undefined\n\n\tif (arguments.length === 1) {\n\t\tdescriptor = obj\n\t} else {\n\t\tdescriptor = inherited ? getInheritedDescriptor(obj, key!) : Object.getOwnPropertyDescriptor(obj, key!)\n\t}\n\n\tif (descriptor && (descriptor.get || descriptor.set)) result = true\n\n\treturn result\n}\n\ninterface DescriptorWithOwner extends PropertyDescriptor {\n\towner: object\n}\n\nexport function getInheritedDescriptor<T extends object>(obj: T, key: keyof T): DescriptorWithOwner | undefined {\n\tlet currentProto = obj\n\tlet descriptor\n\n\twhile (currentProto) {\n\t\tdescriptor = Object.getOwnPropertyDescriptor(currentProto, key)\n\n\t\tif (descriptor) {\n\t\t\t;(descriptor as DescriptorWithOwner).owner = currentProto\n\t\t\treturn descriptor as DescriptorWithOwner\n\t\t}\n\n\t\tcurrentProto = (currentProto as any).__proto__\n\t}\n\n\treturn void 0\n}\n\nexport function getInheritedPropertyNames<T extends object>(obj: T): (keyof T)[] {\n\tlet currentProto = obj\n\tlet keys: (keyof T)[] = []\n\n\twhile (currentProto) {\n\t\tkeys = keys.concat(Object.getOwnPropertyNames(currentProto) as (keyof T)[])\n\t\tcurrentProto = (currentProto as any).__proto__\n\t}\n\n\t// remove duplicates\n\tkeys = Array.from(new Set(keys))\n\n\treturn keys\n}\n\nexport type Constructor<T = object, A extends any[] = any[], Static = {}> = (new (...a: A) => T) & Static\n\n// this is used for type casting in special cases, see the declaration file\nexport function Constructor<T = object, Static = {}>(Ctor: Constructor<any>): Constructor<T> & Static {\n\treturn Ctor as unknown as Constructor<T> & Static\n}\n\n// check if an object has the given prototype in its chain\nexport function hasPrototype(obj: any, proto: any) {\n\tlet currentProto = obj.__proto__\n\n\tdo {\n\t\tif (proto === currentProto) return true\n\t\tcurrentProto = currentProto.__proto__\n\t} while (currentProto)\n\n\treturn false\n}\n\n// copy all properties (as descriptors) from source to destination\nexport function copyDescriptors(source: Object, destination: Object, mod?: any) {\n\tconst props = Object.getOwnPropertyNames(source)\n\tlet i = props.length\n\twhile (i--) {\n\t\tconst prop = props[i]\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(source, prop)\n\t\tif (mod) mod(descriptor)\n\t\tObject.defineProperty(destination, prop, descriptor!)\n\t}\n}\n\nexport function setDefaultPrototypeDescriptors(\n\tprototype: Object,\n\t{defaultClassDescriptor: {writable, enumerable, configurable}}: any,\n) {\n\tconst descriptors = Object.getOwnPropertyDescriptors(prototype)\n\tlet descriptor\n\n\tfor (const key in descriptors) {\n\t\tdescriptor = descriptors[key]\n\n\t\t// regular value\n\t\tif ('value' in descriptor || 'writable' in descriptor) {\n\t\t\tdescriptor.writable = writable\n\t\t}\n\n\t\t// accessor or regular value\n\t\tdescriptor.enumerable = enumerable\n\t\tdescriptor.configurable = configurable\n\t}\n\n\tsetDescriptors(prototype, descriptors)\n}\n\nexport function setDefaultStaticDescriptors(\n\tCtor: any,\n\t{defaultClassDescriptor: {writable, enumerable, configurable}}: any,\n\tstaticBlacklist?: (string | symbol)[],\n) {\n\tconst descriptors = Object.getOwnPropertyDescriptors(Ctor)\n\tlet descriptor\n\n\tfor (const key in descriptors) {\n\t\tif (staticBlacklist && staticBlacklist.includes(key)) {\n\t\t\tdelete descriptors[key]\n\t\t\tcontinue\n\t\t}\n\n\t\tdescriptor = descriptors[key]\n\n\t\t// regular value\n\t\tif ('value' in descriptor || 'writable' in descriptor) {\n\t\t\tdescriptor.writable = writable\n\t\t}\n\n\t\t// accessor or regular value\n\t\tdescriptor.enumerable = enumerable\n\t\tdescriptor.configurable = configurable\n\t}\n\n\tsetDescriptors(Ctor, descriptors)\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// TODO\n//  [x] remove the now-unnecessary modes (leave just what was 'es5' mode)\n//  [x] link helpers to each other, making it possible to destructure the arguments to definer functions\n//  [x] let access helper prototype objects extend from Object, otherwise common tools are not available.\n//  [x] accept a function as return value of function definer, to be treated as a class to derive the definition from, so that it can have access to Protected and Private helpers\n//  [x] let the returned class define protected and private getters which return the protected and private definitions.\n//  [ ] protected and private static members\n//  [ ] no `any` types\n//  [ ] other TODOs in the code\n\nimport {\n\tConstructor,\n\tcopyDescriptors,\n\tsetDefaultStaticDescriptors,\n\tsetDefaultPrototypeDescriptors,\n\thasPrototype,\n} from './utils.js'\n\nimport type {Id} from './types.js'\n\ntype ImplementationKeys = 'static' | 'private' | 'protected'\n\ntype FunctionToConstructor<T, TReturn> = T extends (...a: infer A) => void ? new (...a: A) => TReturn : never\n\n// Note, void also works the same in place of unknown\ntype ReplaceCtorReturn<T, TReturn> = T extends new (...a: infer A) => unknown ? new (...a: A) => TReturn : never\n\ntype ConstructorOrDefault<T> = T extends {constructor: infer TCtor} ? TCtor : () => void\n\n// Although the SuperType type definiton already checks that T extends from\n// Constructor, the additional check in the generic paramters is useful so\n// that we don't get an error about \"never\" which is hard to track down. The\n// generic paramter will cause a more helpful and understandable error.\n// TODO ensure that T is InstanceType of TBase\n// prettier-ignore\ntype SuperType<_T, TSuper extends Constructor<any>> = TSuper extends Constructor<infer I, infer A>\n        ? {constructor: (...a: A) => I} & InstanceType<TSuper>\n        : never\n// type SuperType<\n//     T extends InstanceType<TSuper>,\n//     TSuper extends Constructor<any>\n// > = TSuper extends Constructor<infer I, infer A>\n//     ? T extends InstanceType<TSuper>\n//         ? {constructor: (...a: A) => I} & Id<InstanceType<TSuper>>\n//         : never\n//     : never\n\ntype SuperHelper<TSuper extends Constructor> = <T>(self: T) => SuperType<T, TSuper>\ntype PrivateHelper = <T>(self: T) => T extends {__: {private: infer TPrivate}} ? TPrivate : never\ntype PublicHelper = <T>(self: T) => Omit<T, ImplementationKeys> // TODO validate instance is public?\ntype ProtectedHelper = <T>(self: T) => T extends {__: {protected: infer TProtected}} ? TProtected : never\n// type ProtectedHelper = <T>(self: T) => T extends {protected: infer TProtected} ? TProtected : never\ntype Statics<T> = T extends {static: infer TStatic} ? TStatic : {}\ntype SaveInheritedProtected<T> = T extends {protected: infer TProtected} ? TProtected : {}\n\n// there's a missing link here: if the super class of T is a native class\n// that extends from a lowclass class, then we don't inherit those protected\n// members. Any ideas?\ntype StaticsAndProtected<T> = Id<Statics<T> & {__: {protected: SaveInheritedProtected<T>}}>\n\ntype ExtractInheritedProtected<T> = T extends {__: infer TProtected} ? TProtected : {}\ntype PickImplementationKeys<T> = Pick<T, Extract<keyof T, ImplementationKeys>> // similar to Pick, but not quite\n\n// this moves the implementation keys off the constructor return type and\n// onto a fake __ property, so that we can reference the __ type within the\n// implementatin code, but so that the outside (public) doesn't see the fake\n// __ property.\ntype LowClassThis<T> = Id<Omit<T, ImplementationKeys> & {__: PickImplementationKeys<T>}>\n\ntype OmitImplementationKeys<T> = Omit<T, ImplementationKeys>\n\nimport {\n\tgetFunctionBody,\n\tsetDescriptor,\n\tpropertyIsAccessor,\n\tgetInheritedDescriptor,\n\tgetInheritedPropertyNames,\n\tWeakTwoWayMap,\n} from './utils.js'\n\nexport const staticBlacklist = ['subclass', 'extends', ...Object.getOwnPropertyNames(new Function())]\n\nconst publicProtoToProtectedProto = new WeakMap()\nconst publicProtoToPrivateProto = new WeakMap()\n\n// A two-way map to associate public instances with protected instances.\n// There is one protected instance per public instance\nconst publicToProtected = new WeakTwoWayMap()\n\n// so we can get the class scope associated with a private instance\nconst privateInstanceToClassScope = new WeakMap()\n\nconst brandToPublicPrototypes = new WeakMap()\nconst brandToProtectedPrototypes = new WeakMap()\nconst brandToPrivatePrototypes = new WeakMap()\nconst brandToPublicsPrivates = new WeakMap()\n\nconst defaultOptions = {\n\t// es5 class inheritance is simple, nice, easy, and robust\n\t// There was another mode, but it has been removed\n\tmode: 'es5',\n\n\t// false is better for performance, but true will use Function (similar to\n\t// eval) to name your class functions in the most accurate way.\n\tnativeNaming: false,\n\n\t// similar to ES6 classes:\n\tprototypeWritable: false,\n\tdefaultClassDescriptor: {\n\t\twritable: true,\n\t\tenumerable: false,\n\t\tconfigurable: true,\n\t},\n\tsetClassDescriptors: true,\n}\n\nexport class InvalidSuperAccessError extends Error {}\nexport class InvalidAccessError extends Error {}\n\nexport const Class = createClassHelper()\n\nexport function createClassHelper(options?: any) {\n\toptions = options ? {...defaultOptions, ...options} : defaultOptions\n\n\toptions.defaultClassDescriptor = {\n\t\t...defaultOptions.defaultClassDescriptor,\n\t\t...options.defaultClassDescriptor,\n\t}\n\n\tconst {mode, prototypeWritable, setClassDescriptors, nativeNaming} = options\n\n\t/*\n\t * this is just the public interface adapter for createClass(). Depending\n\t * on how you call this interface, you can do various things like:\n\t *\n\t * - anonymous empty class\n\t *\n\t *    Class()\n\t *\n\t * - named empty class\n\t *\n\t *    Class('Foo')\n\t *\n\t * - base class named Foo\n\t *\n\t *    Class('Foo', (Public, Protected, Private) => {\n\t *      someMethod() { ... },\n\t *    })\n\t *\n\t * - anonymous base class\n\t *\n\t *    Class((Public, Protected, Private) => {\n\t *      someMethod() { ... },\n\t *    })\n\t *\n\t *    Class('Foo').extends(OtherClass, (Public, Protected, Private) => ({\n\t *      someMethod() { ... },\n\t *    }))\n\t *\n\t *    OtherClass.subclass = Class\n\t *    const Bar = OtherClass.subclass((Public, Protected, Private) => {\n\t *      ...\n\t *    })\n\t *\n\t * - any class made with lowclass has a static subclass if you prefer using\n\t *   that:\n\t *\n\t *    Bar.subclass('Baz', (Public, Protected, Private) => {...})\n\t *\n\t * - but you could as well do\n\t *\n\t *    Class('Baz').extends(Bar, (Public, Protected, Private) => {...})\n\t */\n\tfunction Class(): typeof Object\n\t// export function Class<TBase>(\n\tfunction Class(name: string): {\n\t\textends<TBase extends Constructor, T>(\n\t\t\tbase: TBase,\n\t\t\tmembers: (helpers: {\n\t\t\t\tSuper: SuperHelper<TBase>\n\t\t\t\tPublic: PublicHelper\n\t\t\t\tProtected: ProtectedHelper\n\t\t\t\tPrivate: PrivateHelper\n\t\t\t}) => T &\n\t\t\t\tPartial<InstanceType<TBase>> &\n\t\t\t\tThisType<LowClassThis<T & InstanceType<TBase> & ExtractInheritedProtected<TBase>>>,\n\t\t\tbrand?: object,\n\t\t): T extends {constructor: infer _TCtor}\n\t\t\t? FunctionToConstructor<ConstructorOrDefault<T>, Id<InstanceType<TBase> & OmitImplementationKeys<T>>> &\n\t\t\t\t\tId<StaticsAndProtected<T> & Pick<TBase, keyof TBase>>\n\t\t\t: ReplaceCtorReturn<TBase, Id<InstanceType<TBase>>> & Id<StaticsAndProtected<T> & Pick<TBase, keyof TBase>>\n\t}\n\tfunction Class<T>(\n\t\tname: string,\n\t\tmembers: (\n\t\t\thelpers: {\n\t\t\t\tPublic: PublicHelper\n\t\t\t\tProtected: ProtectedHelper\n\t\t\t\tPrivate: PrivateHelper\n\t\t\t\tSuper: never\n\t\t\t}, // TODO Super is actually Object\n\t\t) => T & ThisType<LowClassThis<T>>,\n\t\tbrand?: object,\n\t): FunctionToConstructor<ConstructorOrDefault<T>, Id<OmitImplementationKeys<T>>> & Id<StaticsAndProtected<T>>\n\tfunction Class<T>(\n\t\tname: string,\n\t\tmembers: T & ThisType<LowClassThis<T>>,\n\t\tbrand?: object,\n\t): FunctionToConstructor<ConstructorOrDefault<T>, Id<OmitImplementationKeys<T>>> & Id<StaticsAndProtected<T>>\n\tfunction Class(this: any, ...args: any[]) {\n\t\tlet usingStaticSubclassMethod = false\n\n\t\t// if called as SomeConstructor.subclass, or bound to SomeConstructor\n\t\tif (typeof this === 'function') usingStaticSubclassMethod = true\n\n\t\t// f.e. `Class()`, `Class('Foo')`, `Class('Foo', {...})` , `Class('Foo',\n\t\t// {...}, Brand)`, similar to `class {}`, `class Foo {}`, class Foo\n\t\t// {...}, and class Foo {...} with branding (see comments on classBrand\n\t\t// below regarding positional privacy)\n\t\tif (args.length <= 3) {\n\t\t\tlet name = ''\n\t\t\tlet definer: any = null\n\t\t\tlet classBrand: any = null\n\n\t\t\t// f.e. `Class('Foo')`\n\t\t\tif (typeof args[0] === 'string') name = args[0]\n\t\t\t// f.e. `Class((pub, prot, priv) => ({ ... }))`\n\t\t\telse if (typeof args[0] === 'function' || typeof args[0] === 'object') {\n\t\t\t\tdefiner = args[0]\n\t\t\t\tclassBrand = args[1]\n\t\t\t}\n\n\t\t\t// f.e. `Class('Foo', (pub, prot, priv) => ({ ... }))`\n\t\t\tif (typeof args[1] === 'function' || typeof args[1] === 'object') {\n\t\t\t\tdefiner = args[1]\n\t\t\t\tclassBrand = args[2]\n\t\t\t}\n\n\t\t\t// Make a class in case we wanted to do just `Class()` or\n\t\t\t// `Class('Foo')`...\n\t\t\tconst Ctor = usingStaticSubclassMethod\n\t\t\t\t? createClass.call(this, name, definer, classBrand)\n\t\t\t\t: createClass(name, definer, classBrand)\n\n\t\t\t// ...but add the extends helper in case we wanted to do like:\n\t\t\t// Class().extends(OtherClass, (Public, Protected, Private) => ({\n\t\t\t//   ...\n\t\t\t// }))\n\t\t\tCtor.extends = function (ParentClass: any, def: any, brand: any) {\n\t\t\t\tdef = def || definer\n\t\t\t\tbrand = brand || classBrand\n\t\t\t\treturn createClass.call(ParentClass, name, def, brand)\n\t\t\t}\n\n\t\t\treturn Ctor\n\t\t}\n\n\t\tthrow new TypeError('invalid args')\n\t}\n\n\treturn Class\n\n\t/**\n\t * @param {string} className The name that the class being defined should\n\t * have.\n\t * @param {Function} definer A function or object for defining the class.\n\t * If definer a function, it is passed the Public, Protected, Private, and\n\t * Super helpers. Methods and properties can be defined on the helpers\n\t * directly.  An object containing methods and properties can also be\n\t * returned from the function. If definer is an object, the object should\n\t * be in the same format as the one returned if definer were a function.\n\t */\n\tfunction createClass(this: any, className: string, definer: (...args: any[]) => any, classBrand: object) {\n\t\t'use strict'\n\n\t\t// f.e. ParentClass.subclass((Public, Protected, Private) => {...})\n\t\tlet ParentClass = this\n\n\t\tif (typeof className !== 'string') {\n\t\t\tthrow new TypeError(`\n                You must specify a string for the 'className' argument.\n            `)\n\t\t}\n\n\t\tlet definition = null\n\n\t\t// f.e. Class('Foo', { ... })\n\t\tif (definer && typeof definer === 'object') {\n\t\t\tdefinition = definer\n\t\t}\n\n\t\t// Return early if there's no definition or parent class, just a simple\n\t\t// extension of Object. f.e. when doing just `Class()` or\n\t\t// `Class('Foo')`\n\t\telse if (!ParentClass && (!definer || (typeof definer !== 'function' && typeof definer !== 'object'))) {\n\t\t\tlet Ctor: CtorWithSubclass & Function\n\n\t\t\tif (nativeNaming && className) Ctor = new Function(`return function ${className}() {}`)()\n\t\t\telse {\n\t\t\t\t// force anonymous even in ES6+\n\t\t\t\tCtor = (() => function () {})() as unknown as CtorWithSubclass\n\n\t\t\t\tif (className) setDescriptor(Ctor, 'name', {value: className})\n\t\t\t}\n\n\t\t\tCtor.prototype = {__proto__: Object.prototype, constructor: Ctor}\n\n\t\t\t// no static inheritance here, just like with `class Foo {}`\n\n\t\t\tsetDescriptor(Ctor, 'subclass', {\n\t\t\t\tvalue: Class,\n\t\t\t\twritable: true, // TODO maybe let's make this non writable\n\t\t\t\tenumerable: false,\n\t\t\t\tconfigurable: false,\n\t\t\t})\n\n\t\t\treturn Ctor\n\t\t}\n\n\t\t// A two-way map to associate public instances with private instances.\n\t\t// Unlike publicToProtected, this is inside here because there is one\n\t\t// private instance per class scope per instance (or to say it another\n\t\t// way, each instance has as many private instances as the number of\n\t\t// classes that the given instance has in its inheritance chain, one\n\t\t// private instance per class)\n\t\tconst scopedPublicsToPrivates = classBrand ? void undefined : new WeakTwoWayMap()\n\n\t\tif (classBrand) {\n\t\t\tif (!brandToPublicsPrivates.get(classBrand)) brandToPublicsPrivates.set(classBrand, new WeakTwoWayMap())\n\t\t}\n\n\t\t// if no brand provided, then we use the most fine-grained lexical\n\t\t// privacy. Lexical privacy is described at\n\t\t// https://github.com/tc39/proposal-class-fields/issues/60\n\t\t//\n\t\t// TODO make prototypes non-configurable so that the clasds-brand system\n\t\t// can't be tricked. For now, it's good enough, most people aren't going\n\t\t// to go out of their way to mangle with the prototypes in order to\n\t\t// force invalid private access.\n\t\tclassBrand = classBrand || {brand: 'lexical'}\n\n\t\t// the class \"scope\" that we will bind to the helper functions\n\t\tconst scope = {\n\t\t\tclassName, // convenient for debugging\n\n\t\t\tget publicToPrivate() {\n\t\t\t\treturn scopedPublicsToPrivates ? scopedPublicsToPrivates : brandToPublicsPrivates.get(classBrand)\n\t\t\t},\n\n\t\t\tclassBrand,\n\n\t\t\t// we use these to memoize the Public/Protected/Private access\n\t\t\t// helper results, to make subsequent accessses faster.\n\t\t\tcachedPublicAccesses: new WeakMap(),\n\t\t\tcachedProtectedAccesses: new WeakMap(),\n\t\t\tcachedPrivateAccesses: new WeakMap(),\n\t\t} as any\n\n\t\t// create the super helper for this class scope\n\t\tconst supers = new WeakMap()\n\t\tconst Super = superHelper.bind(null, supers, scope)\n\n\t\t// bind this class' scope to the helper functions\n\t\tconst Public = getPublicMembers.bind(null, scope) as any\n\t\tconst Protected = getProtectedMembers.bind(null, scope) as any\n\t\tconst Private = getPrivateMembers.bind(null, scope) as any\n\n\t\tPublic.prototype = {}\n\t\tProtected.prototype = {}\n\t\tPrivate.prototype = {}\n\n\t\t// alows the user to destructure arguments to definer functions\n\t\tPublic.Public = Public\n\t\tPublic.Protected = Protected\n\t\tPublic.Private = Private\n\t\tPublic.Super = Super\n\t\tProtected.Public = Public\n\t\tProtected.Protected = Protected\n\t\tProtected.Private = Private\n\t\tProtected.Super = Super\n\t\t// Private and Super are never passed as first argument\n\n\t\t// pass the helper functions to the user's class definition function\n\t\tdefinition = definition || (definer && definer(Public, Protected, Private, Super))\n\n\t\t// the user has the option of returning an object that defines which\n\t\t// properties are public/protected/private.\n\t\tif (definition && typeof definition !== 'object' && typeof definition !== 'function') {\n\t\t\tthrow new TypeError(`\n                The return value of a class definer function, if any, should be\n                an object, or a class constructor.\n            `)\n\t\t}\n\n\t\t// if a function was returned, we assume it is a class from which we\n\t\t// get the public definition from.\n\t\tlet customClass = null\n\t\tif (typeof definition === 'function') {\n\t\t\tcustomClass = definition\n\t\t\tdefinition = definition.prototype\n\t\t\tParentClass = customClass.prototype.__proto__.constructor\n\t\t}\n\n\t\tlet staticMembers\n\n\t\t// if functions were provided for the public/protected/private\n\t\t// properties of the definition object, execute them with their\n\t\t// respective access helpers, and use the objects returned from them.\n\t\tif (definition) {\n\t\t\tstaticMembers = definition.static\n\t\t\tdelete definition.static\n\n\t\t\tif (typeof definition.public === 'function') {\n\t\t\t\tdefinition.public = definition.public(Protected, Private)\n\t\t\t}\n\n\t\t\tif (typeof definition.protected === 'function') {\n\t\t\t\tdefinition.protected = definition.protected(Public, Private)\n\t\t\t}\n\n\t\t\tif (typeof definition.private === 'function') {\n\t\t\t\tdefinition.private = definition.private(Public, Protected)\n\t\t\t}\n\t\t}\n\n\t\tParentClass = ParentClass || Object\n\n\t\t// extend the parent class\n\t\tconst parentPublicPrototype = ParentClass.prototype\n\t\tconst publicPrototype = (definition && definition.public) || definition || Object.create(parentPublicPrototype)\n\t\tif (publicPrototype.__proto__ !== parentPublicPrototype) publicPrototype.__proto__ = parentPublicPrototype\n\n\t\t// extend the parent protected prototype\n\t\tconst parentProtectedPrototype = getParentProtectedPrototype(parentPublicPrototype)\n\t\tconst protectedPrototype = (definition && definition.protected) || Object.create(parentProtectedPrototype)\n\t\tif (protectedPrototype.__proto__ !== parentProtectedPrototype)\n\t\t\tprotectedPrototype.__proto__ = parentProtectedPrototype\n\t\tpublicProtoToProtectedProto.set(publicPrototype, protectedPrototype)\n\n\t\t// private prototype inherits from parent, but each private instance is\n\t\t// private only for the class of this scope\n\t\tconst parentPrivatePrototype = getParentPrivatePrototype(parentPublicPrototype)\n\t\tconst privatePrototype = (definition && definition.private) || Object.create(parentPrivatePrototype)\n\t\tif (privatePrototype.__proto__ !== parentPrivatePrototype) privatePrototype.__proto__ = parentPrivatePrototype\n\t\tpublicProtoToPrivateProto.set(publicPrototype, privatePrototype)\n\n\t\tif (!brandToPublicPrototypes.get(classBrand)) brandToPublicPrototypes.set(classBrand, new Set())\n\t\tif (!brandToProtectedPrototypes.get(classBrand)) brandToProtectedPrototypes.set(classBrand, new Set())\n\t\tif (!brandToPrivatePrototypes.get(classBrand)) brandToPrivatePrototypes.set(classBrand, new Set())\n\n\t\tbrandToPublicPrototypes.get(classBrand).add(publicPrototype)\n\t\tbrandToProtectedPrototypes.get(classBrand).add(protectedPrototype)\n\t\tbrandToPrivatePrototypes.get(classBrand).add(privatePrototype)\n\n\t\tscope.publicPrototype = publicPrototype\n\t\tscope.privatePrototype = privatePrototype\n\t\tscope.protectedPrototype = protectedPrototype\n\t\tscope.parentPublicPrototype = parentPublicPrototype\n\t\tscope.parentProtectedPrototype = parentProtectedPrototype\n\t\tscope.parentPrivatePrototype = parentPrivatePrototype\n\n\t\t// the user has the option of assigning methods and properties to the\n\t\t// helpers that we passed in, to let us know which methods and\n\t\t// properties are public/protected/private so we can assign them onto\n\t\t// the respective prototypes.\n\t\tcopyDescriptors(Public.prototype, publicPrototype)\n\t\tcopyDescriptors(Protected.prototype, protectedPrototype)\n\t\tcopyDescriptors(Private.prototype, privatePrototype)\n\n\t\tif (definition) {\n\t\t\t// delete these so we don't expose them on the class' public\n\t\t\t// prototype\n\t\t\tdelete definition.public\n\t\t\tdelete definition.protected\n\t\t\tdelete definition.private\n\n\t\t\t// if a `public` object was also supplied, we treat that as the public\n\t\t\t// prototype instead of the base definition object, so we copy the\n\t\t\t// definition's props to the `public` object\n\t\t\t//\n\t\t\t// TODO For now we copy from the definition object to the 'public'\n\t\t\t// object (publicPrototype), but this won't work with native `super`.\n\t\t\t// Maybe later, we can use a Proxy to read props from both the root\n\t\t\t// object and the public object, so that `super` works from both.\n\t\t\t// Another option is to not allow a `public` object, only protected\n\t\t\t// and private\n\t\t\tif (definition !== publicPrototype) {\n\t\t\t\t// copy whatever remains\n\t\t\t\tcopyDescriptors(definition, publicPrototype)\n\t\t\t}\n\t\t}\n\n\t\tif (customClass) {\n\t\t\tif (staticMembers) copyDescriptors(staticMembers, customClass)\n\t\t\treturn customClass\n\t\t}\n\n\t\tconst userConstructor = publicPrototype.hasOwnProperty('constructor') ? publicPrototype.constructor : null\n\n\t\tlet NewClass!: CtorWithSubclass & Function\n\t\tlet newPrototype = null\n\n\t\t// ES5 version (which seems to be so much better)\n\t\tif (mode === 'es5') {\n\t\t\tNewClass = (() =>\n\t\t\t\tfunction (this: any) {\n\t\t\t\t\tlet ret = null\n\n\t\t\t\t\tlet constructor = null\n\n\t\t\t\t\tif (userConstructor) constructor = userConstructor\n\t\t\t\t\telse constructor = ParentClass\n\n\t\t\t\t\t// Object is a special case because otherwise\n\t\t\t\t\t// `Object.apply(this)` returns a different object and we don't\n\t\t\t\t\t// want to deal with return value in that case\n\t\t\t\t\tif (constructor !== Object) ret = constructor.apply(this, arguments)\n\n\t\t\t\t\tif (ret && (typeof ret === 'object' || typeof ret === 'function')) {\n\t\t\t\t\t\t// XXX should we set ret.__proto__ = constructor.prototype\n\t\t\t\t\t\t// here? Or let the user deal with that?\n\t\t\t\t\t\treturn ret\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this\n\t\t\t\t})() as unknown as CtorWithSubclass\n\n\t\t\tnewPrototype = publicPrototype\n\t\t} else {\n\t\t\tthrow new TypeError(`\n                The lowclass \"mode\" option can only be 'es5' for now.\n            `)\n\t\t}\n\n\t\tif (className) {\n\t\t\tif (nativeNaming) {\n\t\t\t\tconst code = getFunctionBody(NewClass)\n\t\t\t\tconst proto = NewClass.prototype\n\n\t\t\t\tNewClass = new Function(\n\t\t\t\t\t` userConstructor, ParentClass `,\n\t\t\t\t\t`\n                    return function ${className}() { ${code} }\n                `,\n\t\t\t\t)(userConstructor, ParentClass)\n\n\t\t\t\tNewClass.prototype = proto\n\t\t\t} else {\n\t\t\t\tsetDescriptor(NewClass, 'name', {value: className})\n\t\t\t}\n\t\t}\n\n\t\tif (userConstructor && userConstructor.length) {\n\t\t\t// length is not writable, only configurable, therefore the value\n\t\t\t// has to be set with a descriptor update\n\t\t\tsetDescriptor(NewClass, 'length', {\n\t\t\t\tvalue: userConstructor.length,\n\t\t\t})\n\t\t}\n\n\t\t// static stuff {\n\n\t\t// static inheritance\n\t\tNewClass.__proto__ = ParentClass\n\n\t\tif (staticMembers) copyDescriptors(staticMembers, NewClass)\n\n\t\t// allow users to make subclasses. When subclass is called on a\n\t\t// constructor, it defines `this` which is assigned to ParentClass\n\t\t// above.\n\t\tsetDescriptor(NewClass, 'subclass', {\n\t\t\tvalue: Class,\n\t\t\twritable: true,\n\t\t\tenumerable: false,\n\t\t\tconfigurable: false,\n\t\t})\n\n\t\t// }\n\n\t\t// prototype stuff {\n\n\t\tNewClass.prototype = newPrototype\n\n\t\tNewClass.prototype.constructor = NewClass\n\n\t\t// }\n\n\t\tif (setClassDescriptors) {\n\t\t\tsetDefaultStaticDescriptors(NewClass, options, staticBlacklist)\n\t\t\tsetDescriptor(NewClass, 'prototype', {writable: prototypeWritable})\n\t\t\tsetDefaultPrototypeDescriptors(NewClass.prototype, options)\n\t\t\tsetDefaultPrototypeDescriptors(protectedPrototype, options)\n\t\t\tsetDefaultPrototypeDescriptors(privatePrototype, options)\n\t\t}\n\n\t\tscope.constructor = NewClass // convenient for debugging\n\n\t\treturn NewClass\n\t}\n}\n\n// XXX PERFORMANCE: instead of doing multiple prototype traversals with\n// hasPrototype in the following access helpers, maybe we can do a single\n// traversal and check along the way?\n//\n// Worst case examples:\n//\n//   currently:\n//     If class hierarchy has 20 classes\n//     If we detect which instance we have in order of public, protected, private\n//     If the instance we're checking is the private instance of the middle class (f.e. class 10)\n//     We'll traverse 20 public prototypes with 20 conditional checks\n//     We'll traverse 20 protected prototypes with 20 conditional checks\n//     And finally we'll traverse 10 private prototypes with 10 conditional checks\n//     TOTAL: We traverse over 50 prototypes with 50 conditional checks\n//\n//   proposed:\n//     If class hierarchy has 20 classes\n//     If we detect which instance we have in order of public, protected, private\n//     If the instance we're checking is the private instance of the middle class (f.e. class 10)\n//     We'll traverse 10 public prototypes with 3 conditional checks at each prototype\n//     TOTAL: We traverse over 10 prototypes with 30 conditional checks\n//     BUT: The conditional checking will involve reading WeakMaps instead of\n//     checking just reference equality. If we can optimize how this part\n//     works, it might be worth it.\n//\n// Can the tradeoff (less traversal and conditional checks) outweigh the\n// heavier conditional checks?\n//\n// XXX PERFORMANCE: We can also cache the access-helper results, which requires more memory,\n// but will make use of access helpers much faster, especially important for\n// animations.\n\nfunction getParentProtectedPrototype(parentPublicPrototype: any) {\n\t// look up the prototype chain until we find a parent protected prototype, if any.\n\n\tlet parentProtectedProto\n\tlet currentPublicProto = parentPublicPrototype\n\n\twhile (currentPublicProto && !parentProtectedProto) {\n\t\tparentProtectedProto = publicProtoToProtectedProto.get(currentPublicProto)\n\t\tcurrentPublicProto = currentPublicProto.__proto__\n\t}\n\n\t// TODO, now that we're finding the nearest parent protected proto,\n\t// we might not need to create an empty object for each class if we\n\t// don't find one, to avoid prototype lookup depth, as we'll connect\n\t// to the nearest one we find, if any.\n\treturn parentProtectedProto || {}\n}\n\nfunction getParentPrivatePrototype(parentPublicPrototype: any) {\n\t// look up the prototype chain until we find a parent protected prototype, if any.\n\n\tlet parentPrivateProto\n\tlet currentPublicProto = parentPublicPrototype\n\n\twhile (currentPublicProto && !parentPrivateProto) {\n\t\tparentPrivateProto = publicProtoToPrivateProto.get(currentPublicProto)\n\t\tcurrentPublicProto = currentPublicProto.__proto__\n\t}\n\n\t// TODO, now that we're finding the nearest parent protected proto,\n\t// we might not need to create an empty object for each class if we\n\t// don't find one, to avoid prototype lookup depth, as we'll connect\n\t// to the nearest one we find, if any.\n\treturn parentPrivateProto || {}\n}\n\nfunction getPublicMembers(scope: any, instance: any) {\n\tlet result = scope.cachedPublicAccesses.get(instance)\n\n\tif (result) return result\n\n\t// check only for the private instance of this class scope\n\tif (isPrivateInstance(scope, instance))\n\t\tscope.cachedPublicAccesses.set(instance, (result = getSubclassScope(instance).publicToPrivate.get(instance)))\n\t// check for an instance of the class (or its subclasses) of this scope\n\telse if (isProtectedInstance(scope, instance))\n\t\tscope.cachedPublicAccesses.set(instance, (result = publicToProtected.get(instance)))\n\t// otherwise just return whatever was passed in, it's public already!\n\telse scope.cachedPublicAccesses.set(instance, (result = instance))\n\n\treturn result\n}\n\nfunction getProtectedMembers(scope: any, instance: any) {\n\tlet result = scope.cachedProtectedAccesses.get(instance)\n\n\tif (result) return result\n\n\t// check for an instance of the class (or its subclasses) of this scope\n\t// This allows for example an instance of an Animal base class to access\n\t// protected members of an instance of a Dog child class.\n\tif (isPublicInstance(scope, instance))\n\t\tscope.cachedProtectedAccesses.set(\n\t\t\tinstance,\n\t\t\t(result = publicToProtected.get(instance) || createProtectedInstance(instance)),\n\t\t)\n\t// check for a private instance inheriting from this class scope\n\telse if (isPrivateInstance(scope, instance)) {\n\t\tconst publicInstance = getSubclassScope(instance).publicToPrivate.get(instance)\n\t\tscope.cachedProtectedAccesses.set(\n\t\t\tinstance,\n\t\t\t(result = publicToProtected.get(publicInstance) || createProtectedInstance(publicInstance)),\n\t\t)\n\t}\n\n\t// return the protected instance if it was passed in\n\telse if (isProtectedInstance(scope, instance)) scope.cachedProtectedAccesses.set(instance, (result = instance))\n\n\tif (!result) throw new InvalidAccessError('invalid access of protected member')\n\n\treturn result\n}\n\nfunction getSubclassScope(privateInstance: any) {\n\treturn privateInstanceToClassScope.get(privateInstance)\n}\n\nfunction createProtectedInstance(publicInstance: any) {\n\t// traverse instance proto chain, find first protected prototype\n\tconst protectedPrototype = findLeafmostProtectedPrototype(publicInstance)\n\n\t// make the protected instance from the found protected prototype\n\tconst protectedInstance = Object.create(protectedPrototype)\n\tpublicToProtected.set(publicInstance, protectedInstance)\n\treturn protectedInstance\n}\n\nfunction findLeafmostProtectedPrototype(publicInstance: any) {\n\tlet result = null\n\tlet currentProto = publicInstance.__proto__\n\n\twhile (currentProto) {\n\t\tresult = publicProtoToProtectedProto.get(currentProto)\n\t\tif (result) return result\n\t\tcurrentProto = currentProto.__proto__\n\t}\n\n\treturn result\n}\n\nfunction getPrivateMembers(scope: any, instance: any) {\n\tlet result = scope.cachedPrivateAccesses.get(instance)\n\n\tif (result) return result\n\n\t// check for a public instance that is or inherits from this class\n\tif (isPublicInstance(scope, instance))\n\t\tscope.cachedPrivateAccesses.set(\n\t\t\tinstance,\n\t\t\t(result = scope.publicToPrivate.get(instance) || createPrivateInstance(scope, instance)),\n\t\t)\n\t// check for a protected instance that is or inherits from this class'\n\t// protectedPrototype\n\telse if (isProtectedInstance(scope, instance)) {\n\t\tconst publicInstance = publicToProtected.get(instance)\n\t\tscope.cachedPrivateAccesses.set(\n\t\t\tinstance,\n\t\t\t(result = scope.publicToPrivate.get(publicInstance) || createPrivateInstance(scope, publicInstance)),\n\t\t)\n\t}\n\n\t// return the private instance if it was passed in\n\telse if (isPrivateInstance(scope, instance)) scope.cachedPrivateAccesses.set(instance, (result = instance))\n\n\tif (!result) throw new InvalidAccessError('invalid access of private member')\n\n\treturn result\n}\n\nfunction createPrivateInstance(scope: any, publicInstance: any) {\n\tconst privateInstance = Object.create(scope.privatePrototype)\n\tscope.publicToPrivate.set(publicInstance, privateInstance)\n\tprivateInstanceToClassScope.set(privateInstance, scope) // TODO use WeakTwoWayMap\n\treturn privateInstance\n}\n\nfunction isPublicInstance(scope: any, instance: any, brandedCheck = true) {\n\tif (!brandedCheck) return hasPrototype(instance, scope.publicPrototype)\n\n\tfor (const proto of Array.from(brandToPublicPrototypes.get(scope.classBrand))) {\n\t\tif (hasPrototype(instance, proto)) return true\n\t}\n\n\treturn false\n}\n\nfunction isProtectedInstance(scope: any, instance: any, brandedCheck = true) {\n\tif (!brandedCheck) return hasPrototype(instance, scope.protectedPrototype)\n\n\tfor (const proto of Array.from(brandToProtectedPrototypes.get(scope.classBrand))) {\n\t\tif (hasPrototype(instance, proto)) return true\n\t}\n\n\treturn false\n}\n\nfunction isPrivateInstance(scope: any, instance: any, brandedCheck = true) {\n\tif (!brandedCheck) return hasPrototype(instance, scope.privatePrototype)\n\n\tfor (const proto of Array.from(brandToPrivatePrototypes.get(scope.classBrand))) {\n\t\tif (hasPrototype(instance, proto)) return true\n\t}\n\n\treturn false\n}\n\nfunction superHelper(supers: any, scope: any, instance: any) {\n\tconst {parentPublicPrototype, parentProtectedPrototype, parentPrivatePrototype} = scope\n\n\tif (isPublicInstance(scope, instance, false)) return getSuperHelperObject(instance, parentPublicPrototype, supers)\n\n\tif (isProtectedInstance(scope, instance, false))\n\t\treturn getSuperHelperObject(instance, parentProtectedPrototype, supers)\n\n\tif (isPrivateInstance(scope, instance, false)) return getSuperHelperObject(instance, parentPrivatePrototype, supers)\n\n\tthrow new InvalidSuperAccessError('invalid super access')\n}\n\nfunction getSuperHelperObject(instance: any, parentPrototype: any, supers: any) {\n\tlet _super = supers.get(instance)\n\n\t// XXX PERFORMANCE: there's probably some ways to improve speed here using caching\n\tif (!_super) {\n\t\tsupers.set(instance, (_super = Object.create(parentPrototype)))\n\n\t\tconst keys = getInheritedPropertyNames(parentPrototype)\n\t\tlet i = keys.length\n\n\t\twhile (i--) {\n\t\t\tconst key = keys[i]\n\n\t\t\tsetDescriptor(\n\t\t\t\t_super,\n\t\t\t\tkey,\n\t\t\t\t{\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tlet value: any = void undefined\n\n\t\t\t\t\t\tconst descriptor = getInheritedDescriptor(parentPrototype, key)\n\n\t\t\t\t\t\tif (descriptor && propertyIsAccessor(descriptor)) {\n\t\t\t\t\t\t\tconst getter = descriptor.get\n\t\t\t\t\t\t\tif (getter) value = getter.call(instance)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalue = parentPrototype[key]\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (value && value.call && typeof value === 'function') {\n\t\t\t\t\t\t\tvalue = value.bind(instance)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn value\n\t\t\t\t\t},\n\n\t\t\t\t\t// like native `super`, setting a super property does nothing.\n\t\t\t\t\tset: function (value) {\n\t\t\t\t\t\tconst descriptor = getInheritedDescriptor(parentPrototype, key)\n\n\t\t\t\t\t\tif (descriptor && propertyIsAccessor(descriptor)) {\n\t\t\t\t\t\t\tconst setter = descriptor.set\n\t\t\t\t\t\t\tif (setter) value = setter.call(instance, value)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// just like native `super`\n\t\t\t\t\t\t\tinstance[key] = value\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttrue,\n\t\t\t)\n\t\t}\n\t}\n\n\treturn _super\n}\n\nexport default Class\n\ntype CtorWithSubclass = Constructor<\n\tobject,\n\tany[],\n\t{\n\t\tsubclass: Constructor\n\t\t__proto__: CtorWithSubclass\n\t}\n>\n","import type {Constructor} from './utils.js'\n\n// --- TODO handle static inheritance. Nothing has been implemented with regards to\n// static inheritance yet.\n\n// --- TODO allow the subclass (f.e. the `Foo` in `class Foo extends multiple(One,\n// Two, Three) {}`) to call each super constructor (One, Two, and Three)\n// individually with specific arguments.\n\n// --- TODO Prevent duplicate classes in the \"prototype tree\". F.e. if someone calls\n// `multiple(One, Two, Three)`, and `Three` already includes `Two`, we can\n// discard the `Two` argument and perform the combination as if `multiple(One,\n// Three)` had been called.\n\n// --- TODO cache the results, so more than one call to `multiple(One, Two, Three)`\n// returns the same class reference as the first call.\n\n// --- TODO, allow the user to handle the diamond problem in some way other than\n// (\"property or method from the first class in the list wins\"). Perhaps require\n// the user to specify which method to call. For now, it simply calls the first\n// method in the order in which the classes were passed into multiple(). Look\n// here for ideas based on how different languages handle it:\n// https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem\n\nenum ImplementationMethod {\n\tPROXIES_ON_INSTANCE_AND_PROTOTYPE = 'PROXIES_ON_INSTANCE_AND_PROTOTYPE',\n\tPROXIES_ON_PROTOTYPE = 'PROXIES_ON_PROTOTYPE',\n\n\t// TODO, This will be similar to PROXIES_ON_INSTANCE_AND_PROTOTYPE, but\n\t// instead of placing a proxy on the instance, place a Proxy as a direct\n\t// prototype of the instance. I think this should work with Custom Elements,\n\t// and unlike PROXIES_ON_PROTOTYPE, super calls won't access own properties\n\t// on the instance, but actually on the prototypes (test5 super access tests\n\t// fail with PROXIES_ON_PROTOTYPE method).\n\tPROXY_AFTER_INSTANCE_AND_PROTOTYPE = 'PROXY_AFTER_INSTANCE_AND_PROTOTYPE',\n}\n\ntype MultipleOptions = {\n\tmethod: ImplementationMethod\n}\n\nexport function makeMultipleHelper(options?: MultipleOptions) {\n\t/**\n\t * Mixes the given classes into a single class. This is useful for multiple\n\t * inheritance.\n\t *\n\t * @example\n\t * class Foo {}\n\t * class Bar {}\n\t * class Baz {}\n\t * class MyClass extends multiple(Foo, Bar, Baz) {}\n\t */\n\t//  ------------ method 1, define the `multiple()` signature with overrides. The\n\t//  upside is it is easy to understand, but the downside is that name collisions\n\t//  in properties cause the collided property type to be `never`. This would make\n\t//  it more difficult to provide solution for the diamond problem.\n\t//  ----------------\n\t// function multiple(): typeof Object\n\t// function multiple<T extends Constructor>(classes: T): T\n\t// function multiple<T extends Constructor[]>(...classes: T): Constructor<ConstructorUnionToInstanceTypeUnion<T[number]>>\n\t// function multiple(...classes: any): any {\n\t//\n\t//  ------------ method 2, define the signature of `multiple()` with a single\n\t//  signature. The upside is this picks the type of the first property\n\t//  encountered when property names collide amongst all the classes passed into\n\t//  `multiple()`, but the downside is the inner implementation may require\n\t//  casting, and this approach can also cause an infinite type recursion\n\t//  depending on the types used inside the implementation.\n\t//  ----------------\n\treturn function multiple<T extends Constructor[]>(...classes: T): CombinedClasses<T> {\n\t\tconst mode = (options && options.method) || ImplementationMethod.PROXIES_ON_INSTANCE_AND_PROTOTYPE\n\n\t\tswitch (mode) {\n\t\t\tcase ImplementationMethod.PROXIES_ON_INSTANCE_AND_PROTOTYPE: {\n\t\t\t\treturn (withProxiesOnThisAndPrototype as any)(...classes)\n\t\t\t}\n\t\t\tcase ImplementationMethod.PROXIES_ON_PROTOTYPE: {\n\t\t\t\treturn (withProxiesOnPrototype as any)(...classes)\n\t\t\t}\n\t\t\tcase ImplementationMethod.PROXY_AFTER_INSTANCE_AND_PROTOTYPE: {\n\t\t\t\tthrow new Error(' not implemented yet')\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Mixes the given classes into a single class. This is useful for multiple\n * inheritance.\n *\n * @example\n * class Foo {}\n * class Bar {}\n * class Baz {}\n * class MyClass extends multiple(Foo, Bar, Baz) {}\n */\nexport const multiple = makeMultipleHelper({method: ImplementationMethod.PROXIES_ON_INSTANCE_AND_PROTOTYPE})\n// export const multiple = makeMultipleHelper({method: ImplementationMethod.PROXIES_ON_PROTOTYPE})\n\nfunction withProxiesOnThisAndPrototype<T extends Constructor[]>(...classes: T): CombinedClasses<T> {\n\t// avoid performance costs in special cases\n\tif (classes.length === 0) return Object as any\n\tif (classes.length === 1) return classes[0] as any\n\n\tconst FirstClass = classes.shift()!\n\n\t// inherit the first class normally. This allows for required native\n\t// inheritance in certain special cases (like inheriting from HTMLElement\n\t// when making Custom Elements).\n\tclass MultiClass extends FirstClass {\n\t\tconstructor(...args: any[]) {\n\t\t\tsuper(...args)\n\n\t\t\tconst instances: Object[] = []\n\n\t\t\t// make instances of the other classes to get/set properties on.\n\t\t\tlet Ctor: Constructor\n\t\t\tfor (let i = 0, l = classes.length; i < l; i += 1) {\n\t\t\t\tCtor = classes[i]\n\t\t\t\tconst instance = Reflect.construct(Ctor, args)\n\t\t\t\tinstances.push(instance)\n\t\t\t}\n\n\t\t\treturn new Proxy(this, {\n\t\t\t\t// No `set()` trap is needed in this Proxy handler, at least for\n\t\t\t\t// the tests so far. Methods automatically have the correct\n\t\t\t\t// receiver when the are gotten with the `get()` trap, so if any\n\t\t\t\t// methods set a property, the set happens on the expected\n\t\t\t\t// instance, just like regular [[Set]].\n\n\t\t\t\tget(target, key: string | symbol, self: MultiClass): any {\n\t\t\t\t\tif (Reflect.ownKeys(target).includes(key)) return Reflect.get(target, key, self)\n\n\t\t\t\t\tlet instance: Object\n\n\t\t\t\t\tfor (let i = 0, l = instances.length; i < l; i += 1) {\n\t\t\t\t\t\tinstance = instances[i]\n\t\t\t\t\t\tif (Reflect.ownKeys(instance).includes(key)) return Reflect.get(instance, key, self)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst proto = Object.getPrototypeOf(self)\n\t\t\t\t\tif (Reflect.has(proto, key)) return Reflect.get(proto, key, self)\n\n\t\t\t\t\treturn undefined\n\t\t\t\t},\n\n\t\t\t\townKeys(target) {\n\t\t\t\t\tlet keys = Reflect.ownKeys(target)\n\n\t\t\t\t\tlet instance: Object\n\t\t\t\t\tlet instanceKeys: (string | symbol)[]\n\n\t\t\t\t\tfor (let i = 0, l = instances.length; i < l; i += 1) {\n\t\t\t\t\t\tinstance = instances[i]\n\t\t\t\t\t\tinstanceKeys = Reflect.ownKeys(instance)\n\t\t\t\t\t\tfor (let j = 0, l = instanceKeys.length; j < l; j += 1) keys.push(instanceKeys[j])\n\t\t\t\t\t}\n\n\t\t\t\t\treturn keys\n\t\t\t\t},\n\n\t\t\t\t// This makes the `in` operator work, for example.\n\t\t\t\thas(target, key: string | symbol): boolean {\n\t\t\t\t\tif (Reflect.ownKeys(target).includes(key)) return true\n\n\t\t\t\t\tlet instance: Object\n\t\t\t\t\tfor (let i = 0, l = instances.length; i < l; i += 1) {\n\t\t\t\t\t\tinstance = instances[i]\n\t\t\t\t\t\tif (Reflect.ownKeys(instance).includes(key)) return true\n\t\t\t\t\t}\n\n\t\t\t\t\t// all instances share the same prototype, so just check it once\n\t\t\t\t\tconst proto = Object.getPrototypeOf(self)\n\t\t\t\t\tif (Reflect.has(proto, key)) return true\n\n\t\t\t\t\treturn false\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n\n\tconst newMultiClassPrototype = new Proxy(Object.create(FirstClass.prototype), {\n\t\tget(target, key: string | symbol, self: MultiClass): any {\n\t\t\tif (Reflect.has(target, key)) return Reflect.get(target, key, self)\n\n\t\t\tlet Class: Constructor\n\t\t\tfor (let i = 0, l = classes.length; i < l; i += 1) {\n\t\t\t\tClass = classes[i]\n\t\t\t\tif (Reflect.has(Class.prototype, key)) return Reflect.get(Class.prototype, key, self)\n\t\t\t}\n\t\t},\n\n\t\thas(target, key): boolean {\n\t\t\tif (Reflect.has(target, key)) return true\n\n\t\t\tlet Class: Constructor\n\t\t\tfor (let i = 0, l = classes.length; i < l; i += 1) {\n\t\t\t\tClass = classes[i]\n\t\t\t\tif (Reflect.has(Class.prototype, key)) return true\n\t\t\t}\n\n\t\t\treturn false\n\t\t},\n\t})\n\n\t// This is so that `super` calls will work. We can't replace\n\t// MultiClass.prototype with a Proxy because MultiClass.prototype is\n\t// non-configurable, so it is impossible to wrap it with a Proxy. Instead,\n\t// we stick our own custom Proxy-wrapped prototype object between\n\t// MultiClass.prototype and FirstClass.prototype.\n\tObject.setPrototypeOf(MultiClass.prototype, newMultiClassPrototype)\n\n\treturn MultiClass as unknown as CombinedClasses<T>\n}\n\nlet currentSelf: Object[] = []\n\nconst __instances__ = new WeakMap<object, Object[]>()\nconst getInstances = (inst: object): Object[] => {\n\tlet result = __instances__.get(inst)\n\tif (!result) __instances__.set(inst, (result = []))\n\treturn result\n}\n\n// function hasKey(instance: object, key: string | number | symbol, traverse: boolean = true): boolean {\n// \tif (Reflect.ownKeys(instance).includes(key)) return true\n\n// \tif (!traverse) return false\n\n// \tconst instances = __instances__.get(instance)\n// \tif (!instances) return false\n\n// \tfor (const instance of instances) if (hasKey(instance, key, true)) return true\n\n// \treturn false\n// }\n\ntype GetResult = {has: boolean; value: any}\n\nconst getResult: GetResult = {has: false, value: undefined}\n\nfunction getFromInstance(instance: object, key: string | symbol, result: GetResult): void {\n\tresult.has = false\n\tresult.value = undefined\n\n\tif (Reflect.ownKeys(instance).includes(key)) {\n\t\tresult.has = true\n\t\tresult.value = Reflect.get(instance, key)\n\t\treturn\n\t}\n\n\tconst instances = __instances__.get(instance)\n\tif (!instances) return\n\n\tfor (const instance of instances) {\n\t\t// if (hasKey(instance, key, true)) {\n\t\t//     getFromInstance(instance, key, result)\n\t\t//     return\n\t\t// }\n\n\t\tgetFromInstance(instance, key, result)\n\t\tif (result.has) return\n\t}\n}\n\nlet shouldGetFromPrototype = false\nlet topLevelMultiClassPrototype: object | null = null\n\nfunction withProxiesOnPrototype<T extends Constructor[]>(...classes: T): CombinedClasses<T> {\n\t// avoid performance costs in special cases\n\tif (classes.length === 0) return Object as any\n\tif (classes.length === 1) return classes[0] as any\n\n\tconst FirstClass = classes.shift()!\n\n\t// inherit the first class normally. This allows for required native\n\t// inheritance in certain special cases (like inheriting from HTMLElement\n\t// when making Custom Elements).\n\tclass MultiClass extends FirstClass {\n\t\tconstructor(...args: any[]) {\n\t\t\tsuper(...args)\n\n\t\t\t// This assumes no super constructor returns a different this from\n\t\t\t// their constructor. Otherwise the getInstances call won't work as\n\t\t\t// expected.\n\t\t\tconst instances = getInstances(this)\n\n\t\t\t// make instances of the other classes to get/set properties on.\n\t\t\tfor (const Ctor of classes) {\n\t\t\t\tconst instance = Reflect.construct(Ctor, args)\n\t\t\t\tinstances.push(instance)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst newMultiClassPrototype = new Proxy(Object.create(FirstClass.prototype), {\n\t\tget(target, key: string | symbol, self: MultiClass): any {\n\t\t\tif (!topLevelMultiClassPrototype) topLevelMultiClassPrototype = target\n\n\t\t\tif (!shouldGetFromPrototype) {\n\t\t\t\tgetFromInstance(self, key, getResult)\n\n\t\t\t\tif (getResult.has) {\n\t\t\t\t\ttopLevelMultiClassPrototype = null\n\t\t\t\t\treturn getResult.value\n\t\t\t\t}\n\n\t\t\t\t// only the top level MultiClass subclass prototype will check\n\t\t\t\t// instances for a property. The superclass MultiClass\n\t\t\t\t// prototypes will do a regular prototype get.\n\t\t\t\tshouldGetFromPrototype = true\n\t\t\t}\n\n\t\t\t// TODO, I think instead of passing `self` we should be passing the\n\t\t\t// instances created from the classes? We need to write more tests,\n\t\t\t// especially ones that create new properties later and not at\n\t\t\t// construction time.\n\t\t\tif (shouldGetFromPrototype) {\n\t\t\t\tlet result: any = undefined\n\n\t\t\t\tif (Reflect.has(target, key)) result = Reflect.get(target, key, self)\n\n\t\t\t\tlet Class: Constructor\n\t\t\t\tfor (let i = 0, l = classes.length; i < l; i += 1) {\n\t\t\t\t\tClass = classes[i]\n\t\t\t\t\tif (Reflect.has(Class.prototype, key)) result = Reflect.get(Class.prototype, key, self)\n\t\t\t\t}\n\n\t\t\t\tif (topLevelMultiClassPrototype === target) {\n\t\t\t\t\ttopLevelMultiClassPrototype = null\n\t\t\t\t\tshouldGetFromPrototype = false\n\t\t\t\t}\n\n\t\t\t\treturn result\n\t\t\t}\n\n\t\t\t// currentSelf.push(self)\n\n\t\t\t// if (Reflect.ownKeys(self).includes(key)) {\n\t\t\t// \tcurrentSelf.pop()\n\t\t\t// \treturn Reflect.get(target, key, self)\n\t\t\t// }\n\n\t\t\t// currentSelf.pop()\n\n\t\t\t// for (const instance of getInstances(self)) {\n\t\t\t// \tcurrentSelf.push(instance)\n\n\t\t\t// \tif (Reflect.ownKeys(instance).includes(key)) {\n\t\t\t// \t\tcurrentSelf.pop()\n\t\t\t// \t\treturn Reflect.get(instance, key, instance)\n\t\t\t// \t}\n\n\t\t\t// \tcurrentSelf.pop()\n\t\t\t// }\n\n\t\t\t// return undefined\n\t\t},\n\n\t\tset(target, key: string | symbol, value: any, self): boolean {\n\t\t\tcurrentSelf.push(self)\n\n\t\t\t// If the key is in the current prototype chain, continue like normal...\n\t\t\tif (Reflect.has(target, key)) {\n\t\t\t\tcurrentSelf.pop()\n\t\t\t\treturn Reflect.set(target, key, value, self)\n\t\t\t}\n\n\t\t\tcurrentSelf.pop()\n\n\t\t\t// ...Otherwise if the key isn't, set it on one of the instances of the classes.\n\t\t\tfor (const instance of getInstances(self)) {\n\t\t\t\tcurrentSelf.push(instance)\n\n\t\t\t\tif (Reflect.has(instance, key)) {\n\t\t\t\t\tcurrentSelf.pop()\n\t\t\t\t\treturn Reflect.set(instance, key, value, instance)\n\t\t\t\t\t// return Reflect.set(instance, key, value, self)\n\t\t\t\t}\n\n\t\t\t\tcurrentSelf.pop()\n\t\t\t}\n\n\t\t\t// If the key is not found, set it like normal.\n\t\t\treturn Reflect.set(target, key, value, self)\n\t\t},\n\n\t\thas(target, key): boolean {\n\t\t\t// if (currentSelf.length) {\n\t\t\t// \tlet current = currentSelf[currentSelf.length - 1]\n\n\t\t\t// \twhile (current) {\n\t\t\t// \t\tif (Reflect.ownKeys(current).includes(key)) return true\n\t\t\t// \t\tcurrent = Reflect.getPrototypeOf(current) as MultiClass\n\t\t\t// \t}\n\n\t\t\t// \tfor (const instance of getInstances(current as MultiClass))\n\t\t\t// \t\tif (Reflect.has(instance, key)) return true\n\t\t\t// } else {\n\t\t\tif (Reflect.has(target, key)) return true\n\n\t\t\tlet Class: Constructor\n\t\t\tfor (let i = 0, l = classes.length; i < l; i += 1) {\n\t\t\t\tClass = classes[i]\n\t\t\t\tif (Reflect.has(Class.prototype, key)) return true\n\t\t\t}\n\t\t\t// }\n\n\t\t\treturn false\n\t\t},\n\t})\n\n\t// This is so that `super` calls will work. We can't replace\n\t// MultiClass.prototype with a Proxy because MultiClass.prototype is\n\t// non-configurable, so it is impossible to wrap it with a Proxy. Instead,\n\t// we stick our own custom Proxy-wrapped prototype object between\n\t// MultiClass.prototype and FirstClass.prototype.\n\tObject.setPrototypeOf(MultiClass.prototype, newMultiClassPrototype)\n\n\treturn MultiClass as unknown as CombinedClasses<T>\n}\n\n// type ConstructorUnionToInstanceTypeUnion<U> = (U extends Constructor\n//   ? (k: InstanceType<U>) => void\n//   : never) extends (k: infer I) => void\n//     ? I\n//     : never\n\ntype Shift<T extends any[]> = ((...args: T) => any) extends (_: any, ...args: infer R) => any ? R : never\ntype MixedArray<T extends Constructor<any>[]> = _MixedArray<T, {}>\ntype _MixedArray<T extends Constructor<any>[], U> = {\n\t0: new () => U\n\t1: _MixedArray<\n\t\tShift<T>,\n\t\t{\n\t\t\t[K in keyof InstanceType<T[0]> | keyof U]: K extends keyof U ? U[K] : InstanceType<T[0]>[K]\n\t\t}\n\t>\n}[T['length'] extends 0 ? 0 : 1]\n\ntype CombinedClasses<T> = T extends [] | [undefined]\n\t? typeof Object\n\t: T extends Constructor[]\n\t? MixedArray<T>\n\t: typeof Object\n","// the bread and butter\nexport * from './Class.js'\nimport Class from './Class.js'\nexport default Class\n\n// mix and match your classes!\nexport * from './multiple.js'\nexport * from './Mixin.js'\n\n// extras\nexport {default as instanceOf} from './instanceOf.js'\nexport * from './native.js'\nexport * from './utils.js'\n\nexport * from './types.js'\n\nexport const version = '5.0.1'\n","import {getInheritedDescriptor} from 'lowclass'\n\ntype Options = {\n\tasync: boolean\n\tinherited: boolean\n}\n\ntype Callback = (propName: PropertyKey, value: any) => unknown\n\nconst propsAndCallbacks = new WeakMap<object, Map<PropertyKey, Callback[]>>()\n\nexport function observe<T extends object>(\n\tobject: T,\n\tpropertyNames: (keyof T)[],\n\tcallback: Callback,\n\toptions: Partial<Options> = {},\n) {\n\t// TODO the options.async option will make callbacks fire on the next microtask instead of synchronously\n\toptions.async = options.async || false\n\toptions.inherited = options.inherited || false\n\n\tfor (const propName of propertyNames) {\n\t\tlet propCallbacks = propsAndCallbacks.get(object)\n\t\t!propCallbacks && propsAndCallbacks.set(object, (propCallbacks = new Map()))\n\n\t\tlet callbacks = propCallbacks.get(propName)\n\n\t\tif (callbacks) {\n\t\t\tif (!callbacks.includes(callback)) callbacks.push(callback)\n\t\t\tcontinue\n\t\t}\n\n\t\t// the rest only runs once, the first time the prop observation is set up\n\n\t\tpropCallbacks.set(propName, (callbacks = []))\n\t\tcallbacks.push(callback)\n\n\t\tdefineObservationGetterSetter(object, propName, options as Options)\n\t}\n}\n\n// NOTE, unobserve does not remove the observation accessors that observe\n// creates. It might be nice if it did, so that objects can return to their lean\n// shape. TODO can we do it?\nexport function unobserve<T extends object>(object: T, props: Callback | (keyof T)[], callback?: Callback) {\n\tconst propCallbacks = propsAndCallbacks.get(object)\n\n\tif (!propCallbacks) {\n\t\tconsole.warn('the object is not observed, no need to unobserve:', object)\n\t\treturn\n\t}\n\n\t// If called as unobserve(object, callback), unobserve all props for the callback.\n\tif (typeof props === 'function') {\n\t\tcallback = props\n\t\tprops = Array.from(propCallbacks.keys()) as (keyof T)[]\n\t}\n\n\t// Otherwise called as unobserve(object, props, callback), so unobserve the specific props for the callback.\n\n\tif (!callback) throw new TypeError('callback not supplied')\n\n\tfor (const prop of props) {\n\t\tconst callbacks = propCallbacks.get(prop)!\n\n\t\tif (callbacks.includes(callback)) {\n\t\t\tcallbacks.splice(callbacks.indexOf(callback), 1)\n\t\t\tif (!callbacks.length) propCallbacks.delete(prop)\n\t\t}\n\t}\n}\n\n// This is used to keep track if an object already has an observation accessor\n// in place for a given property. If so, then we don't need to add another layer\n// of property descriptor on top for each new call to observe on the object.\nconst objectsToObservableProps = new WeakMap<object, Set<PropertyKey>>()\n\nfunction defineObservationGetterSetter<T extends object>(object: T, propName: keyof T, options: Options) {\n\tlet observableProps: Set<keyof T> | undefined\n\tconst inherited = options.inherited\n\n\tif (!inherited) {\n\t\tobservableProps = objectsToObservableProps.get(object) as Set<keyof T> | undefined\n\t\tif (!observableProps) objectsToObservableProps.set(object, (observableProps = new Set()))\n\t\telse if (observableProps.has(propName)) return\n\t}\n\n\t// get the existing descriptor, or create a new one if the property doesn't exist.\n\tconst descriptor =\n\t\tgetInheritedDescriptor(object, propName) ||\n\t\t({\n\t\t\tvalue: undefined,\n\t\t\twritable: true,\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t} as ReturnType<typeof getInheritedDescriptor>)!\n\n\tconst owner = options.inherited ? descriptor.owner || object : object\n\n\tif (inherited) {\n\t\t// TODO, this check probably actually needs to look up on the prototype\n\t\t// chain, because people can modify prototype chains and introduce new\n\t\t// descriptors anywhere in the chain. We want to check the whole chain\n\t\t// to see if we find an observation accessor defined by us.\n\t\tobservableProps = objectsToObservableProps.get(owner) as Set<keyof T> | undefined\n\t\tif (!observableProps) objectsToObservableProps.set(owner, (observableProps = new Set()))\n\t\telse if (observableProps.has(propName)) return\n\t}\n\n\tlet getValue: (() => any) | undefined\n\tlet setValue: ((v: any) => void) | undefined\n\n\tif (descriptor.get || descriptor.set) {\n\t\t// we will use the existing getter/setter assuming they don't do\n\t\t// anyting crazy that we might not expect. (See? Another reason for\n\t\t// Object.observe)\n\t\tconst oldGet = descriptor.get\n\t\tconst oldSet = descriptor.set\n\n\t\tgetValue = oldGet ? () => oldGet.call(object) : undefined\n\t\tsetValue = oldSet ? value => oldSet.call(object, value) : undefined\n\t} else {\n\t\tlet _value = descriptor.value\n\n\t\tif (!descriptor.writable) {\n\t\t\tconsole.error(`Can not observe readonly property \"${propName}\" with descriptor`, descriptor, `of object:`, object)\n\n\t\t\tthrow new Error(`Can not observe readonly property \"${propName}\" of object: ${object} (see above)`)\n\t\t}\n\n\t\tdelete descriptor.value\n\t\tdelete descriptor.writable\n\n\t\tgetValue = () => _value\n\t\tsetValue = value => (_value = value)\n\t}\n\n\tif (!setValue) throw new Error('Can not observe read-only property.')\n\tif (!getValue) throw new Error('Can not observe write-only property.')\n\n\tObject.defineProperty(owner, propName, {\n\t\t...descriptor,\n\t\tget: getValue,\n\t\tset(value) {\n\t\t\tsetValue!(value)\n\t\t\trunCallbacks(object, propName, getValue!())\n\t\t},\n\t})\n\n\tobservableProps!.add(propName)\n}\n\nfunction runCallbacks<T extends object>(object: T, propName: keyof T, value: any) {\n\tconst callbacks = propsAndCallbacks.get(object)!.get(propName)\n\n\tif (!callbacks) return\n\n\tfor (const callback of callbacks) {\n\t\tcallback(propName, value)\n\t}\n}\n","import {observe, unobserve} from './observe.js'\n\nexport {observe, unobserve}\n\ntype Handler = (arg: {paths: string[]}, ...args: any[]) => unknown\n\nexport function deeplyObserve(object: object, handler: Handler, argumentArray: any[] = [], path = '') {\n\tif (typeof object !== 'object' || !object) {\n\t\tthrow new Error('Cannot observe a non-object.')\n\t}\n\n\t// requires Object.observe\n\t;(Object as any).observe(object, function (changes: any) {\n\t\tvar paths: any[] = []\n\n\t\tchanges.forEach(function (change: any) {\n\t\t\tpaths.push(path.length ? path + '.' + change.name : change.name)\n\t\t})\n\n\t\thandler({paths}, ...argumentArray)\n\t})\n\n\tfor (var prop in object) {\n\t\tconst value: object = (object as any)[prop]\n\n\t\tif (value && typeof value === 'object') {\n\t\t\tdeeplyObserve(value, handler, argumentArray, path.length ? path + '.' + prop : prop)\n\t\t}\n\t}\n}\n\nexport const version = '0.5.1'\n"],"names":["supportsSpread","isSyntaxSupported","supportsClass","supportsNewTarget","TRUE_CONSTRUCTOR","Symbol","setPrototype","Object","setPrototypeOf","object","newPrototype","__proto__","construct","Reflect","Function","instantiator","constructor","args","target","arguments","length","TypeError","prototype","instance","value","apply","SKIP_PROPERTIES","copyProperties","source","destination","getOwnPropertyNames","defineProperty","properties","getOwnPropertySymbols","concat","i","indexOf","getOwnPropertyDescriptor","property","newless","name","usesClassSyntax","toString","substr","requiresNew","newlessConstructor","this","returnValue","error","test","message","Error","create","Node","console","newTarget","hasNewTarget","eval","code","getFunctionBody","setDescriptor","example","useStrict","WeakTwoWayMap","m","WeakMap","set","a","b","get","item","has","fn","split","shift","pop","join","descriptorDefaults","enumerable","configurable","obj","key","newDescriptor","inherited","overrideDescriptor","getInheritedDescriptor","setDescriptors","newDescriptors","currentDescriptor","currentDescriptors","getOwnPropertyDescriptors","defineProperties","oldDescriptor","writable","propertyIsAccessor","descriptor","result","currentProto","owner","getInheritedPropertyNames","keys","Array","from","Set","hasPrototype","proto","copyDescriptors","mod","props","prop","setDefaultPrototypeDescriptors","defaultClassDescriptor","descriptors","setDefaultStaticDescriptors","Ctor","staticBlacklist","includes","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","hasOwnProperty","call","r","toStringTag","publicProtoToProtectedProto","publicProtoToPrivateProto","publicToProtected","privateInstanceToClassScope","brandToPublicPrototypes","brandToProtectedPrototypes","brandToPrivatePrototypes","brandToPublicsPrivates","defaultOptions","mode","nativeNaming","prototypeWritable","setClassDescriptors","InvalidSuperAccessError","InvalidAccessError","getPublicMembers","scope","cachedPublicAccesses","isPrivateInstance","getSubclassScope","publicToPrivate","isProtectedInstance","getProtectedMembers","cachedProtectedAccesses","isPublicInstance","createProtectedInstance","publicInstance","privateInstance","protectedPrototype","findLeafmostProtectedPrototype","protectedInstance","getPrivateMembers","cachedPrivateAccesses","createPrivateInstance","privatePrototype","brandedCheck","publicPrototype","classBrand","superHelper","supers","parentPublicPrototype","parentProtectedPrototype","parentPrivatePrototype","getSuperHelperObject","parentPrototype","_super","getter","bind","setter","ImplementationMethod","options","Class","usingStaticSubclassMethod","definer","createClass","extends","ParentClass","def","brand","className","scopedPublicsToPrivates","Super","Public","Protected","Private","staticMembers","customClass","static","public","protected","private","parentProtectedProto","currentPublicProto","getParentProtectedPrototype","parentPrivateProto","getParentPrivatePrototype","add","userConstructor","NewClass","ret","createClassHelper","PROXIES_ON_INSTANCE_AND_PROTOTYPE","propsAndCallbacks","observe","propertyNames","callback","async","propName","propCallbacks","Map","callbacks","push","defineObservationGetterSetter","unobserve","splice","delete","warn","objectsToObservableProps","observableProps","getValue","setValue","oldGet","oldSet","_value","runCallbacks","deeplyObserve","handler","argumentArray","path","changes","paths","forEach","change"],"sourceRoot":""}